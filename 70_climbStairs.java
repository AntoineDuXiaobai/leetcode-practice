// 70.爬梯子

//1.动态规划 dynamic programming

//我们可以把到达第 n 阶楼梯的方法数量看作是到达第 n-1 阶和第 n-2 阶的方法数量之和。因为每次你可以选择爬 1 个台阶或 2 个台阶。
// 要解决这个问题，我们可以使用动态规划的方法。动态规划是一种算法思想，它通过将问题分解为更小的子问题来解决更大的问题。
// 在这个例子中，我们可以把到达第 n 阶楼梯的方法数量看作是到达第 n-1 阶和第 n-2 阶的方法数量之和。因为每次你可以选择爬 1 个台阶或 2 个台阶。
// 这里是如何用 Java 实现这个算法的步骤：
// 1.创建一个数组来存储到达每一阶楼梯的方法数量。
// 2.初始化数组的前两个值：到达第一阶有一种方法，到达第二阶有两种方法（一次爬两阶或分两次各爬一阶）。
// 3.使用循环，从第三阶开始计算，每一阶的方法数量是前两阶方法数量的和。
// 4.最后，数组的最后一个元素将表示到达楼顶的方法数量。
class Solution {
    public int climbStairs(int n) {
        if(n==1){
            return 1;
        }
        int[] dp = new int[n];
        dp[0] = 1; // 到达第一阶的方法数
        dp[1] = 2; // 到达第二阶的方法数

        for(int i=2;i<n;i++){
            dp[i] = dp[i-1]+dp[i-2];
        }
        return dp[n-1];// 返回到达楼顶的方法数
    }
}

//2. 滚动数组思想  空间优化，复杂度O(1)

class Solution {
    public int climbStairs(int n) {
        int p=0, q=0, r=1;
        for(int i=1; i<=n ; i++){
            p=q;
            q=r;
            r=p+q;
        }
        return r;
}
}